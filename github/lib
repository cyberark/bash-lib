#!/bin/bash

: "${BASH_LIB_DIR:?BASH_LIB_DIR must be set. Please source bash-lib/init before other scripts from bash-lib.}"

function bl_hub_available(){
    # type instead of which, so it can be stubbed in tests
    type hub &>/dev/null || bl_fail "hub (github cli) binary not found, please install it via your package manager or use bl_hub_download_latest."
}

function bl_hub_creds_available(){
    config_file="${HUB_CONFIG:-${HOME}/.config/hub}"
    [[ -n "${GITHUB_USER:-}" ]] && [[ -n "${GITHUB_TOKEN:-}" ]] && return
    [[ -e "${config_file}" ]] && return
    bl_fail "No credentials found for (git)hub please set GITHUB_USER and GITHUB_TOKEN or create ~/.config/hub"
}

function bl_hub_check(){
    bl_in_git_repo \
        && bl_hub_available \
        && bl_hub_creds_available
}

function bl_hub_download_latest(){
    local install_dir="${1:-${HOME}/bin}"
    local os_arch="${2:-}"
    local tmpdir=".hubdl"
    local download_url
    local bin_path
    bl_curl_available

    if [[ -z "${os_arch}" ]]; then
        if [[ "${OSTYPE}" =~ "darwin" ]]; then
            os_arch="darwin-amd64"
        else
            os_arch="linux-amd64"
        fi
        bl_debug "Hub Download detected arch: ${os_arch}"
    fi

    asset_url="$(curl -L https://api.github.com/repos/github/hub/releases/latest \
        |jq -r ".assets | map(select(.name | contains(\"${os_arch}\")))[0].url")"

    git config --global init.defaultBranch master
    download_url="$(curl "${asset_url}"  |jq -r '.browser_download_url')"

    bin_path="${install_dir}/hub"
    mkdir -p "${install_dir}"

    mkdir -p "${tmpdir}"
    bl_spushd "${tmpdir}"
        curl -s -L "${download_url}" > hub.tgz
        tar xf hub.tgz
    bl_spopd
    mv "${tmpdir}"/*/bin/hub "${bin_path}"
    rm -rf "${tmpdir}"

    bl_info "${download_url}/bin/hub --> ${bin_path}"
}

function bl_hub_issue_number_for_title(){
    local title="${1}"
    bl_hub_check
    hub issue \
        |grep "${title}" \
        |awk -F'[ #]+' '{print $2; exit}'
}

function bl_hub_add_issue_comment(){
    local issue_number="${1}"
    local comment="${2}"

    bl_hub_check

    [[ -n "${comment}" ]] || bl_die "bl_hub_add_issue_comment: Comment must not be empty"
    hub issue show "${issue_number}" >/dev/null || bl_die "Github Issue number ${issue_number} isn't valid for repo $(pwd)"

    owner_repo="$(bl_github_owner_repo)"
    if hub api "repos/${owner_repo}/issues/${issue_number}/comments" --field body="${comment}" >/dev/null; then
        bl_debug "Added comment: \"${comment}\" to https://github.com/${owner_repo}/issues/${issue_number}"
    else
        bl_fail "Failed to add comment: ${comment} to issue: ${owner_repo}#${issue_number}"
    fi
}


function bl_hub_comment_or_create_issue(){
    local title="${1}"
    local message="${2}"
    local label="${3:-}"
    local label_param=""
    local issue_number
    local issue_url
    local action
    local owner_repo
    bl_hub_check

    owner_repo="$(bl_github_owner_repo)"
    issue_number="$(bl_hub_issue_number_for_title "${title}" ||:)"

    if [[ -z "${issue_number}" ]]; then
        action="created"
        if [[ -n "${label}" ]]; then
            label_param="-l ${label}"
        fi

        # issue doesn't exist create it

        # The following prevents a shellcheck warning about label_param
        # getting split into multiple words. That is exactly what should
        # happen as "-l" and "labelname" should be separate tokens for
        # the hub command.
        # shellcheck disable=SC2086
        issue_url="$(hub issue create -m "${title}

${message}" ${label_param})"

        # Example issue url: https://github.com/{owner}/{repo}/issues/{issue number}"
        # To find the issue number, split on / and take the last field
        issue_number="$(awk -F'/' '{print $NF}' <<<"${issue_url}" )"

        bl_debug "Created issue: ${issue_url} with title \"${title}\""
    else
        issue_url="https://github.com/${owner_repo}/issues/${issue_number}"
        action="commented"
        bl_debug "Found existing issue for title \"${title}\": ${issue_url}"
        bl_hub_add_issue_comment "${issue_number}" "${message}"
    fi
    cat <<EOJ
{
    "action": "${action}",
    "issue_number": "${issue_number}",
    "issue_url": "${issue_url}",
    "issue_ref": "${owner_repo}#${issue_number}"
}
EOJ
}
